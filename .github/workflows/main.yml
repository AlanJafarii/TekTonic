    name: Flutter Android Build - Ultimate Fix # نام جدید و واضح برای Workflow

    on:
      push:
        branches:
          - main # این Workflow با هر push به branch 'main' اجرا می شود.
                  # اگر branch اصلی شما 'master' است، آن را به 'master' تغییر دهید.
      workflow_dispatch: # این به شما اجازه می دهد که Workflow را به صورت دستی از رابط کاربری GitHub Actions اجرا کنید.

    jobs:
      build:
        runs-on: ubuntu-latest # Workflow روی یک ماشین مجازی لینوکس (اوبونتو) اجرا می شود.

        steps:
          - name: Checkout code # مرحله 1: دانلود کدهای پروژه از مخزن GitHub
            uses: actions/checkout@v4

          - name: Set up Java # مرحله 2: نصب و تنظیم Java Development Kit (JDK)
            uses: actions/setup-java@v4
            with:
              distribution: 'temurin' # توزیع Temurin از JDK (توصیه شده)
              java-version: '17'      # نسخه JDK مورد نیاز (JDK 17 برای فلاتر توصیه می شود)

          - name: Set up Flutter # مرحله 3: نصب و تنظیم Flutter SDK
            uses: subosito/flutter-action@v2
            with:
              flutter-version: '3.32.4' # نسخه دقیق Flutter SDK (بر اساس خروجی doctor شما)
              channel: 'stable'         # استفاده از کانال stable (پایدار) فلاتر

          - name: Configure Android SDK and Install Components # مرحله 4: تنظیم PATH و نصب کامپوننت ها
            run: |
              # اطمینان از تنظیم ANDROID_HOME توسط flutter-action یا تنظیم پیش فرض
              # معمولا این متغیر توسط اکشن Flutter تنظیم می شود.
              # echo "ANDROID_HOME: $ANDROID_HOME" # برای debugging

              # اضافه کردن مسیر cmdline-tools/latest/bin به PATH برای اجرای sdkmanager
              # این مسیر به صورت پیش فرض توسط subosito/flutter-action برای آخرین SDK اضافه می شود
              export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH"
              # echo "PATH after adding cmdline-tools: $PATH" # برای debugging

              # پذیرش لایسنس های Android SDK به صورت خودکار
              yes | sdkmanager --licenses || true
              
              # نصب پلتفرم اندروید 34، ابزارهای بیلد 34.0.0 و platform-tools
              sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools"

          - name: Clean Gradle Cache # مرحله جدید: پاک کردن کامل کش Gradle
            run: |
              rm -rf ~/.gradle/caches
              rm -rf ~/.gradle/wrapper

          - name: Run Flutter Doctor -v for detailed info # مرحله اشکال زدایی: اجرای flutter doctor -v
            run: flutter doctor -v

          - name: Restore Flutter packages # مرحله 5: دریافت و بازیابی پکیج های Dart/Flutter
            run: flutter pub get

          # - name: Decode Google Services (Optional for Firebase)
          #   if: ${{ secrets.GOOGLE_SERVICES_JSON != '' }}
          #   run: |
          #     echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json

          - name: Build Android APK with verbose logging # مرحله 6: ساخت فایل APK نسخه Release با لاگ های کامل
            # از './gradlew' برای اجرای مستقیم Gradle Wrapper استفاده می کنیم تا خطاهای مرتبط با Gradle را با جزئیات کامل ببینیم.
            # `--stacktrace` لاگ های Java stack trace را برای خطاهای عمیق تر نمایش می دهد.
            run: |
              cd android # به پوشه اندروید پروژه می رویم
              ./gradlew assembleRelease --stacktrace --debug # بیلد APK با جزئیات کامل
              cd .. # به ریشه پروژه بر می گردیم

          - name: Upload APK artifact # مرحله 7: آپلود فایل APK ساخته شده به عنوان Artifact
            uses: actions/upload-artifact@v4
            with:
              name: app-release-apk
              path: android/app/build/outputs/apk/release/app-release.apk # مسیر صحیح APK بعد از cd android

          - name: Build Android AppBundle with verbose logging # مرحله 8: ساخت فایل AppBundle نسخه Release با لاگ های کامل
            run: |
              cd android # به پوشه اندروید پروژه می رویم
              ./gradlew bundleRelease --stacktrace --debug # بیلد AppBundle با جزئیات کامل
              cd .. # به ریشه پروژه بر می گردیم

          - name: Upload AppBundle artifact # مرحله 9: آپلود فایل AppBundle ساخته شده به عنوان Artifact
            uses: actions/upload-artifact@v4
            with:
              name: app-release-bundle
              path: android/app/build/outputs/bundle/release/app-release.aab # مسیر صحیح AppBundle بعد از cd android
